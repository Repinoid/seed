# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go Docker Compose CI

on: # workflow_dispatch
  push:
    branches: [ "based" ]
#  pull_request:
#    branches: [ "main" ]

env:
  EXTERNAL_PORT: "8100"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

          #  клонированиe репозитория в рабочую директорию
      - name: Checkout code
        uses: actions/checkout@v4

          # Команда actions/setup-go@v4 — это действие (action) для GitHub Actions, 
          # предназначенное для настройки среды Go в рабочих процессах CI/CD. 
          # Оно позволяет установить указанную версию Go на виртуальной машине GitHub-hosted runner или self-hosted runner, 
          # а также предоставляет дополнительные функции, такие как кэширование зависимостей.
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Go UNIT Test
        run:  go test -v ./internal/tests/unit

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          #  сборка образа
      - name: Build with Docker Compose
        run: docker compose build

          # who is who
      - name: docker compose WHOami
        run:  docker compose run --rm go-server echo -n "pwd "; pwd; echo -n "whoami  "; whoami
          # для проверки копирования
      - name: LS -R
        run:  docker compose run --rm go-server ls -R

          # Команда docker/login-action@v3 — это официальное действие (action) 
          # для GitHub Actions, предназначенное для аутентификации в Docker-регистрах
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}     

          # push  to docker hub
      - name: docker PUSH
        run:  docker-compose push

      - name: Start services and run integration tests
        run: |
          docker compose up -d

            # засылаем внутренний порт контейнера 8080, т.к. тесты запускаются ВНУТРИ контейнера
          docker compose exec -T -e PORTOS="8080"  go-server go test -v ./internal/tests/unit
          # docker compose exec -T -e PORTOS="8080"  go-server go test -v ./internal/tests/integration 

            # засылаем внешний порт 8100, т.к. тесты запускаются снаружи контейнера, на виртуальной машине GitHub
          env PORTOS="8100" go test -v ./internal/tests/unit 
          # env PORTOS="8100" go test -v ./internal/tests/integration 
          
          docker compose  down

